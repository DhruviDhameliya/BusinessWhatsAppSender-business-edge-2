<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAOwAAADsAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABqw1mubK0V5QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAZsxmBWrDWftspgD/cbMvGwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABqxVdGasNZ/2ymAP9qtCV9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAGrDWcBqw1n/bKYA/2ysEfEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABpxFlfasNZ/2rDWf9spgD/bKYA/2myI5sAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAasFXKWrDWfNqw1n/asNZ/2ymAP9spgD/bKgE/muz
        KUoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGvJXhNqw1nZasNZ/2rDWf9qw1n/bKYA/2ym
        AP9spgD/bKoK+my5JigAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgv2AIasNZwmrDWf9qw1n/asNZ/2rD
        Wf9spgD/bKYA/2ymAP9spgD/a6sR8G22JA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AVfJiqFqw1n/asNZ/2rD
        Wf9qw1n/asNZ/2ymAP9spgD/bKYA/2ymAP9spgD/a60W4AD/AAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAt2v+CLdn9/1bL
        kfpqw1n/asNZ/2rDWf9qw1n/bKYA/2ymAP9spgD/bKYA/2ymAP9spgD/arAevgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALNr/Ui3a
        //4t2v//Ltr8/1bLkP9qw1n/asNZ/2rDWf9spgD/bKYA/2ymAP9spgD/bKYA/2ymAP9spgD/a68khgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC7b
        /xwt2v/sLdr//y3a//8t2v//Ltr8/1bLkP9qw1n/asNZ/2ymAP9spgD/bKYA/2ymAP9spgD/bKYA/2ym
        AP9sqAb+b7IrNQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAALdr/tS3a//8t2v//Ldr//y3a//8t2v//Ldn9/1XLk/9qw1n/bKYA/2ymAP9spgD/bKYA/2ym
        AP9spgD/bKYA/2ymAP9srBTqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAC7Z/0Mt2v//Ldr//y3a//8t2v//Ldr//y3a//8t2v//Ltr8/1fKi/VspgD/bKYA/2ym
        AP9spgD/bKYA/2ymAP9spgD/bKYA/2ymAP9ssSSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAALdr/zS3a//8t2v//Ldr//y3a//8t2v//Ldr//y3a//8t2v//Ltr8/0S2
        bfdspgD/bKYA/2ymAP9spgD/bKYA/2ymAP9spgD/bKYA/2urD/UAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAC3c/zMt2v//Ldr//y3a//8t2v//Ldr//y3a//8t2v//Ltn/vizb
        /10u3P8sHcbpUGyyIp5srBHxbKYA/2ymAP9spgD/bKYA/2ymAP9spgD/bKYA/2uzKWQAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ8b9kC3a//8t2v//Ldr//y3a//8t2v//Ldr/+yzb
        /2MAAAAAAAAAAAAAAAAAAAAAAAAAAAD/AAJrsCCubKYB/2ymAP9spgD/bKYA/2ymAP9spgD/bK4b0wAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQPHWIrL7/i3a//8t2v//Ldr//y3a
        //8s2f9zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABqrx3AbKYA/2ymAP9spgD/bKYA/2ym
        AP9sqwz4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADPuDwA48P4BPfH7IrT7/y3a
        //8t2v//Ldr/20C//wQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFWqKwZsqAj8bKYA/2ym
        AP9spgD/bKYA/2ymAP9xsy8bAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOfIoADjw/wA4
        8P8CP/H/IrH7/y3a//8s2v+KAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG+w
        HstspgD/bKYA/2ymAP9spgD/bKYA/26xK0gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5
        8joAOPD/ADjw/wA48P8CPvH9IrT7/y3a/2cAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA85hWpHiqGvtspgD/bKYA/2ymAP9spgD/bbIlZwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAADnuLQA48P8AOPD/ADjw/wA48P8BOvH3F4f4cQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAD2lFez8IY//3ypHP9spgD/bKYA/2ymAP9qsydUAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAM/IUADjw/wA48P8AOPD/ADjw/wA48P8AOPC3AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAPSPUOb0hkD/8Ig//3qpG/9spgD/bKYA/260KSwAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOPDfADjw/wA48P8AOPD/ADjw/wA48PsAOPMpAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD0mV9G9IZB//SGQP/0hkD/8IY//3qpHP1sqgr7AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA58ZAAOPD/ADjw/wA48P8AOPD/ADjw/wU5
        7M7tgEkOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA9pdoG/WNSvX0hkD/9IZA//SGQP/0hkD/8Ig//5um
        NMYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADnuLQA48P0AOPD/ADjw/wA4
        8P8FOuz8rW9y+vWGQNzzh0JC//8AAQAAAAAAAAAAAAAAAPOYW231jEn49IZA//SGQP/0hkD/9IZA//SG
        QP/0h0H/85liQQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADfxoQA4
        8P8AOPD/Bjrr/6pvdf/0hkD/9IZA//SGQP/0hkDg9p5mkfWQT+X1jEj69IZA//SGQP/0hkD/9IZA//SG
        QP/0hkD/9IZA//aRUdkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAPfMVADjw3gQ57fuvcHL/9IZA//SGQP/0hkD/9IZA//SGQP/0hkD08IRD+/SGQP/0hkD/9IZA//SG
        QP/0hkD/9IZA//SGQP/1jEj68JZiIgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAANe0rpW162vSGQP/0hkD/9IZA//SGQP/0hkD/9IZA//SGQP/gdUH/74FA//SG
        QP/0hkD/9IZA//SGQP/0hkD/9IlD/vWYYE0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwg0Ij9IVA1vSGQP/0hkD/9IZA//SGQP/0hkD/9IZA/992
        Qf/fdkH/74FA//SGQP/0hkD/9IZA//WMSvj4mmJEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADriTsN84ZAg/SGQPT0hkD/9IZA//SG
        QP/0hkD/33ZB/991Qf/fdkH/74JC/fWJRP72lFW//6JoFgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8oxAFPWG
        P2X0h0Cy9IdA2PSGQPThdUH+4XZA+uN5QebpfEKi95RaHwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//5////8P////D////w////4H///8A///+AH///AA///gAH//4AB//8A
        AP/+AAB//gAAf/wAAD/8AAA/+AAAH/gHwB/4D/Af8A/wD/Af+A/wH/gP8B/4D/Af+A/4D/Af+AfgH/gB
        wB/8AAA//AAAP/4AAH//AAD//4AB///gB/8=
</value>
  </data>
</root>